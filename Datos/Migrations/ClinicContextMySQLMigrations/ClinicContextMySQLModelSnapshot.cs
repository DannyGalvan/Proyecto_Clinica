// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations.ClinicContextMySQLMigrations
{
    [DbContext(typeof(ClinicContextMySQL))]
    partial class ClinicContextMySQLModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Models.AnalysisDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DocumentTypeAnalysisId")
                        .HasColumnType("int");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeAnalysisId");

                    b.HasIndex("SampleId");

                    b.ToTable("AnalysisDocuments");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Cui")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Entities.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 639, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Administrador",
                            Name = "Administrador"
                        });
                });

            modelBuilder.Entity("Entities.Models.DocumentTypeAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DocumentTypesAnalysis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 700, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Certificación de Muestra Médica",
                            Name = "PE-01"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 700, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Dictamen de Muestra Médica",
                            Name = "PE-02"
                        });
                });

            modelBuilder.Entity("Entities.Models.Documents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RolId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 416, DateTimeKind.Local).AddTicks(7781),
                            CreatedBy = 1,
                            DepartmentId = 1,
                            Name = "Usuario Manager",
                            RolId = 1,
                            UnitId = 1,
                            UserId = 1,
                            UserName = "System"
                        });
                });

            modelBuilder.Entity("Entities.Models.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ExamTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Hematología",
                            Name = "HE"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Química Clínica",
                            Name = "QC"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Inmunología",
                            Name = "IN"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Microbiología",
                            Name = "MC"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Serología",
                            Name = "SR"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Hormonas",
                            Name = "HM"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Genética y Biología Molecular",
                            Name = "GB"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Citología",
                            Name = "CT"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Microbiología",
                            Name = "MC"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 661, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Gases en Sangre",
                            Name = "GS"
                        });
                });

            modelBuilder.Entity("Entities.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Entities.Models.LogBookDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdLog")
                        .HasColumnType("int");

                    b.Property<string>("LastValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PreviousValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdLog");

                    b.ToTable("LogBookDetails");
                });

            modelBuilder.Entity("Entities.Models.LogHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("IpMachine")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RegisterId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LogHeaders");
                });

            modelBuilder.Entity("Entities.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 633, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Mantenimiento de usuarios",
                            Image = "users",
                            Name = "Mantenimiento Analistas",
                            Path = "/Users"
                        });
                });

            modelBuilder.Entity("Entities.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdModule")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdModule");

                    b.ToTable("Operations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 419, DateTimeKind.Local).AddTicks(427),
                            Description = "Creación de nuevo analista",
                            Icon = "plus",
                            IdModule = 1,
                            IsVisible = true,
                            Name = "Crear Analista",
                            Path = "/User/Create"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 419, DateTimeKind.Local).AddTicks(2312),
                            Description = "Actualización de analista",
                            Icon = "",
                            IdModule = 1,
                            IsVisible = false,
                            Name = "Actualizar Analista",
                            Path = "/User/Update"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 419, DateTimeKind.Local).AddTicks(2759),
                            Description = "Listado de Analistas Existentes",
                            Icon = "",
                            IdModule = 1,
                            IsVisible = true,
                            Name = "Listar Analistas",
                            Path = "/User"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 419, DateTimeKind.Local).AddTicks(3369),
                            Description = "Actualización de analista",
                            Icon = "",
                            IdModule = 1,
                            IsVisible = false,
                            Name = "Actualizar Analista Parcialmente",
                            Path = "/User/Patch"
                        });
                });

            modelBuilder.Entity("Entities.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SupportNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SupportTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Entities.Models.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RequestStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 650, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Creada",
                            Name = "Cr"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 650, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Enviada",
                            Name = "EN"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 650, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Revisada",
                            Name = "RV"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 650, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Análisis",
                            Name = "AN"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 650, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Asignada",
                            Name = "AS"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 650, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Autorizada",
                            Name = "AU"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 650, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Rechazada",
                            Name = "RE"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 650, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Eliminada",
                            Name = "EL"
                        });
                });

            modelBuilder.Entity("Entities.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 625, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 625, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "",
                            Name = "Centralizador"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 625, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "",
                            Name = "Técnico"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 625, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "",
                            Name = "Analista"
                        });
                });

            modelBuilder.Entity("Entities.Models.RolOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RolId");

                    b.ToTable("RolOperations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 421, DateTimeKind.Local).AddTicks(3344),
                            OperationId = 1,
                            RolId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 421, DateTimeKind.Local).AddTicks(3775),
                            OperationId = 2,
                            RolId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 421, DateTimeKind.Local).AddTicks(4067),
                            OperationId = 3,
                            RolId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 421, DateTimeKind.Local).AddTicks(4363),
                            OperationId = 4,
                            RolId = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(NOW())");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Presentation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("QuantityUnits")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("TypeSampleId")
                        .HasColumnType("int");

                    b.Property<int>("UnitMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("TypeSampleId");

                    b.HasIndex("UnitMeasurementId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Entities.Models.SampleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SampleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 672, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Cultivo",
                            Name = "CL"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 672, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Plaquetas",
                            Name = "PL"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 672, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Eses",
                            Name = "ES"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 672, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Orina",
                            Name = "OR"
                        });
                });

            modelBuilder.Entity("Entities.Models.SamplesItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SampleId");

                    b.ToTable("SamplesItems");
                });

            modelBuilder.Entity("Entities.Models.SupportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SupportTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 656, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Comprobante de Pago",
                            Name = "CP"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 656, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Seguro Médico",
                            Name = "SE"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 656, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Solicitud Médica",
                            Name = "SM"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 656, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Examen Externo",
                            Name = "ET"
                        });
                });

            modelBuilder.Entity("Entities.Models.TraceabilityRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusRequestId");

                    b.ToTable("TraceabilityRequests");
                });

            modelBuilder.Entity("Entities.Models.UnitMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UnitMeasurements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 680, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Miligramos",
                            Name = "MG"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 680, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Gramos",
                            Name = "GR"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 26, 680, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Mililitros",
                            Name = "MI"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Confirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DateToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecoveryToken")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("");

                    b.Property<bool>("Reset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Confirm = true,
                            CreatedAt = new DateTime(2023, 10, 21, 17, 26, 27, 423, DateTimeKind.Local).AddTicks(1907),
                            DateToken = "",
                            Email = "pruebas.test29111999@gmail.com",
                            Number = "51995142",
                            Password = "b20b0f63ce2ed361e8845d6bf2e59811aaa06ec96bcdb92f9bc0c5a25e83c9a6",
                            Reset = false
                        });
                });

            modelBuilder.Entity("Entities.Models.UserAssignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<int>("AssignerUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("AssignerUserId");

                    b.HasIndex("RequestId");

                    b.ToTable("UserAssignments");
                });

            modelBuilder.Entity("Entities.Models.AnalysisDocument", b =>
                {
                    b.HasOne("Entities.Models.DocumentTypeAnalysis", "DocumentTypeAnalysis")
                        .WithMany("AnalysisDocuments")
                        .HasForeignKey("DocumentTypeAnalysisId")
                        .IsRequired();

                    b.HasOne("Entities.Models.Sample", "Sample")
                        .WithMany("AnalysisDocuments")
                        .HasForeignKey("SampleId")
                        .IsRequired();

                    b.Navigation("DocumentTypeAnalysis");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Departments", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("DepartmentsCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("DepartmentsUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.DocumentTypeAnalysis", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("DocumentTypeAnalysisCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("DocumentTypeAnalysisUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.Documents", b =>
                {
                    b.HasOne("Entities.Models.Request", "Request")
                        .WithMany("Documents")
                        .HasForeignKey("RequestId")
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("AssigningEmployees")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.Departments", "Departments")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .IsRequired();

                    b.HasOne("Entities.Models.Rol", "Rol")
                        .WithMany("Employees")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Departments");

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.ExamType", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("ExamTypeCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("ExamTypeUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.Item", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("ItemCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("ItemUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.LogBookDetail", b =>
                {
                    b.HasOne("Entities.Models.LogHeader", "Header")
                        .WithMany("Details")
                        .HasForeignKey("IdLog")
                        .IsRequired();

                    b.Navigation("Header");
                });

            modelBuilder.Entity("Entities.Models.LogHeader", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("LogHeaders")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Module", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("ModuleCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("ModuleUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.Operation", b =>
                {
                    b.HasOne("Entities.Models.Module", "Modulo")
                        .WithMany("Operations")
                        .HasForeignKey("IdModule")
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("Entities.Models.Request", b =>
                {
                    b.HasOne("Entities.Models.User", "Client")
                        .WithMany("Requests")
                        .HasForeignKey("ClientId")
                        .IsRequired();

                    b.HasOne("Entities.Models.ExamType", "ExamType")
                        .WithMany("Requests")
                        .HasForeignKey("ExamTypeId")
                        .IsRequired();

                    b.HasOne("Entities.Models.RequestStatus", "Status")
                        .WithMany("Requests")
                        .HasForeignKey("RequestStatusId")
                        .IsRequired();

                    b.HasOne("Entities.Models.SupportType", "Support")
                        .WithMany("Requests")
                        .HasForeignKey("SupportTypeId")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ExamType");

                    b.Navigation("Status");

                    b.Navigation("Support");
                });

            modelBuilder.Entity("Entities.Models.RequestStatus", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("RequestStatusCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("RequestStatusUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.Rol", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("RolCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("RolUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.RolOperation", b =>
                {
                    b.HasOne("Entities.Models.Operation", "Operation")
                        .WithMany("RolOperations")
                        .HasForeignKey("OperationId")
                        .IsRequired();

                    b.HasOne("Entities.Models.Rol", "Rol")
                        .WithMany("RolOperations")
                        .HasForeignKey("RolId")
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entities.Models.Sample", b =>
                {
                    b.HasOne("Entities.Models.Request", "Request")
                        .WithMany("Samples")
                        .HasForeignKey("RequestId")
                        .IsRequired();

                    b.HasOne("Entities.Models.SampleType", "SampleType")
                        .WithMany("Samples")
                        .HasForeignKey("TypeSampleId")
                        .IsRequired();

                    b.HasOne("Entities.Models.UnitMeasure", "UnitMeasure")
                        .WithMany("Samples")
                        .HasForeignKey("UnitMeasurementId")
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("SampleType");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("Entities.Models.SampleType", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("SampleTypeCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("SampleTypeUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.SamplesItem", b =>
                {
                    b.HasOne("Entities.Models.Item", "Item")
                        .WithMany("Items")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("Entities.Models.Sample", "Sample")
                        .WithMany("SamplesItems")
                        .HasForeignKey("SampleId")
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Entities.Models.SupportType", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("SupportTypeCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("SupportTypeUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.TraceabilityRequests", b =>
                {
                    b.HasOne("Entities.Models.Request", "Request")
                        .WithMany("TraceabilityRequests")
                        .HasForeignKey("RequestId")
                        .IsRequired();

                    b.HasOne("Entities.Models.RequestStatus", "Status")
                        .WithMany("Traceability")
                        .HasForeignKey("StatusRequestId")
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Entities.Models.UnitMeasure", b =>
                {
                    b.HasOne("Entities.Models.User", "Creator")
                        .WithMany("UnitMeasureCreator")
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Updater")
                        .WithMany("UnitMeasureUpdater")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Entities.Models.UserAssignments", b =>
                {
                    b.HasOne("Entities.Models.User", "Assigned")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("AssignedUserId")
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Assigner")
                        .WithMany("AssigningUsers")
                        .HasForeignKey("AssignerUserId")
                        .IsRequired();

                    b.HasOne("Entities.Models.Request", "Request")
                        .WithMany("UserAssignments")
                        .HasForeignKey("RequestId")
                        .IsRequired();

                    b.Navigation("Assigned");

                    b.Navigation("Assigner");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Entities.Models.Departments", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.DocumentTypeAnalysis", b =>
                {
                    b.Navigation("AnalysisDocuments");
                });

            modelBuilder.Entity("Entities.Models.ExamType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Models.Item", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Entities.Models.LogHeader", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Entities.Models.Module", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Entities.Models.Operation", b =>
                {
                    b.Navigation("RolOperations");
                });

            modelBuilder.Entity("Entities.Models.Request", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Samples");

                    b.Navigation("TraceabilityRequests");

                    b.Navigation("UserAssignments");
                });

            modelBuilder.Entity("Entities.Models.RequestStatus", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Traceability");
                });

            modelBuilder.Entity("Entities.Models.Rol", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("RolOperations");
                });

            modelBuilder.Entity("Entities.Models.Sample", b =>
                {
                    b.Navigation("AnalysisDocuments");

                    b.Navigation("SamplesItems");
                });

            modelBuilder.Entity("Entities.Models.SampleType", b =>
                {
                    b.Navigation("Samples");
                });

            modelBuilder.Entity("Entities.Models.SupportType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Models.UnitMeasure", b =>
                {
                    b.Navigation("Samples");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("AssignedUsers");

                    b.Navigation("AssigningEmployees");

                    b.Navigation("AssigningUsers");

                    b.Navigation("Clients");

                    b.Navigation("DepartmentsCreator");

                    b.Navigation("DepartmentsUpdater");

                    b.Navigation("DocumentTypeAnalysisCreator");

                    b.Navigation("DocumentTypeAnalysisUpdater");

                    b.Navigation("Employees");

                    b.Navigation("ExamTypeCreator");

                    b.Navigation("ExamTypeUpdater");

                    b.Navigation("ItemCreator");

                    b.Navigation("ItemUpdater");

                    b.Navigation("LogHeaders");

                    b.Navigation("ModuleCreator");

                    b.Navigation("ModuleUpdater");

                    b.Navigation("RequestStatusCreator");

                    b.Navigation("RequestStatusUpdater");

                    b.Navigation("Requests");

                    b.Navigation("RolCreator");

                    b.Navigation("RolUpdater");

                    b.Navigation("SampleTypeCreator");

                    b.Navigation("SampleTypeUpdater");

                    b.Navigation("SupportTypeCreator");

                    b.Navigation("SupportTypeUpdater");

                    b.Navigation("UnitMeasureCreator");

                    b.Navigation("UnitMeasureUpdater");
                });
#pragma warning restore 612, 618
        }
    }
}
